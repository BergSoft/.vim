let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <Plug>NERDCommenterInInsert  <BS>:call NERDComment(0, "insert")
inoremap <Plug>(fakeclip-screen-insert-p) =fakeclip#content('pastebuffer')
noremap! <Plug>(fakeclip-screen-insert-o) =fakeclip#content('pastebuffer')
noremap! <Plug>(fakeclip-screen-insert-r) =fakeclip#content('pastebuffer')
noremap! <Plug>(fakeclip-screen-insert) =fakeclip#content('pastebuffer')
inoremap <Plug>(fakeclip-insert-p) =fakeclip#content('clipboard')
noremap! <Plug>(fakeclip-insert-o) =fakeclip#content('clipboard')
noremap! <Plug>(fakeclip-insert-r) =fakeclip#content('clipboard')
noremap! <Plug>(fakeclip-insert) =fakeclip#content('clipboard')
imap <F12> :marks
cmap <F12> :marks
imap <F11> :reg
cmap <F11> :reg
imap <S-F10> :qall!
cmap <S-F10> :qall!
imap <F10> :qall
cmap <F10> :qall
imap <F7> :set wrap! wrap?
cmap <F7> :set wrap! wrap?
imap <F6> :set list! list?
cmap <F6> :set list! list?
imap <F5> :nohls
cmap <F5> :nohls
imap <silent> <F4> :NERDTreeToggle
cmap <silent> <F4> :NERDTreeToggle
imap <F3> :Rgrep
cmap <F3> :Rgrep
imap <F2> :write
cmap <F2> :write
imap <silent> <F1> :TlistToggle
cmap <silent> <F1> :TlistToggle
imap <C-Down> ::tabmove
cmap <C-Down> ::tabmove
imap <M-Down> ::tablast
cmap <M-Down> ::tablast
imap <M-Up> ::tabfirst
cmap <M-Up> ::tabfirst
inoremap <Nul> 
vmap <silent>  a:call MyKeyMapHighlight()gv
nmap <silent>  a:call MyKeyMapHighlight()
nmap  ok
vmap t ::tabnewgv
nmap t ::tabnew
snoremap <silent>  `>a=XPTemplateStart(0)
xnoremap <silent>  "0s=XPTemplatePreWrap(@0)
vnoremap   zf
nnoremap   za
vmap "&[P <Plug>(fakeclip-screen-[P)
vmap "&[p <Plug>(fakeclip-screen-[p)
vmap "&]P <Plug>(fakeclip-screen-]P)
vmap "&]p <Plug>(fakeclip-screen-]p)
vmap "&gP <Plug>(fakeclip-screen-gP)
vmap "&gp <Plug>(fakeclip-screen-gp)
vmap "&P <Plug>(fakeclip-screen-P)
vmap "&p <Plug>(fakeclip-screen-p)
nmap "&[P <Plug>(fakeclip-screen-[P)
nmap "&[p <Plug>(fakeclip-screen-[p)
nmap "&]P <Plug>(fakeclip-screen-]P)
nmap "&]p <Plug>(fakeclip-screen-]p)
nmap "&gP <Plug>(fakeclip-screen-gP)
nmap "&gp <Plug>(fakeclip-screen-gp)
nmap "&P <Plug>(fakeclip-screen-P)
nmap "&p <Plug>(fakeclip-screen-p)
vmap "&Y <Plug>(fakeclip-screen-Y)
vmap "&y <Plug>(fakeclip-screen-y)
nmap "&yy <Plug>(fakeclip-screen-Y)
nmap "&Y <Plug>(fakeclip-screen-Y)
nmap "&y <Plug>(fakeclip-screen-y)
vmap "*[P <Plug>(fakeclip-[P)
vmap "*[p <Plug>(fakeclip-[p)
vmap "*]P <Plug>(fakeclip-]P)
vmap "*]p <Plug>(fakeclip-]p)
vmap "*gP <Plug>(fakeclip-gP)
vmap "*gp <Plug>(fakeclip-gp)
vmap "*P <Plug>(fakeclip-P)
vmap "*p <Plug>(fakeclip-p)
nmap "*[P <Plug>(fakeclip-[P)
nmap "*[p <Plug>(fakeclip-[p)
nmap "*]P <Plug>(fakeclip-]P)
nmap "*]p <Plug>(fakeclip-]p)
nmap "*gP <Plug>(fakeclip-gP)
nmap "*gp <Plug>(fakeclip-gp)
nmap "*P <Plug>(fakeclip-P)
nmap "*p <Plug>(fakeclip-p)
vmap "*Y <Plug>(fakeclip-Y)
vmap "*y <Plug>(fakeclip-y)
nmap "*yy <Plug>(fakeclip-Y)
nmap "*Y <Plug>(fakeclip-Y)
nmap "*y <Plug>(fakeclip-y)
vmap "+[P <Plug>(fakeclip-[P)
vmap "+[p <Plug>(fakeclip-[p)
vmap "+]P <Plug>(fakeclip-]P)
vmap "+]p <Plug>(fakeclip-]p)
vmap "+gP <Plug>(fakeclip-gP)
vmap "+gp <Plug>(fakeclip-gp)
vmap "+P <Plug>(fakeclip-P)
vmap "+p <Plug>(fakeclip-p)
nmap "+[P <Plug>(fakeclip-[P)
nmap "+[p <Plug>(fakeclip-[p)
nmap "+]P <Plug>(fakeclip-]P)
nmap "+]p <Plug>(fakeclip-]p)
nmap "+gP <Plug>(fakeclip-gP)
nmap "+gp <Plug>(fakeclip-gp)
nmap "+P <Plug>(fakeclip-P)
nmap "+p <Plug>(fakeclip-p)
vmap "+Y <Plug>(fakeclip-Y)
vmap "+y <Plug>(fakeclip-y)
nmap "+yy <Plug>(fakeclip-Y)
nmap "+Y <Plug>(fakeclip-Y)
nmap "+y <Plug>(fakeclip-y)
nmap ,ca <Plug>NERDCommenterAltDelims
vmap ,cA <Plug>NERDCommenterAppend
nmap ,cA <Plug>NERDCommenterAppend
vmap ,c$ <Plug>NERDCommenterToEOL
nmap ,c$ <Plug>NERDCommenterToEOL
vmap ,cu <Plug>NERDCommenterUncomment
nmap ,cu <Plug>NERDCommenterUncomment
vmap ,cn <Plug>NERDCommenterNest
nmap ,cn <Plug>NERDCommenterNest
vmap ,cb <Plug>NERDCommenterAlignBoth
nmap ,cb <Plug>NERDCommenterAlignBoth
vmap ,cl <Plug>NERDCommenterAlignLeft
nmap ,cl <Plug>NERDCommenterAlignLeft
vmap ,cy <Plug>NERDCommenterYank
nmap ,cy <Plug>NERDCommenterYank
vmap ,ci <Plug>NERDCommenterInvert
nmap ,ci <Plug>NERDCommenterInvert
vmap ,cs <Plug>NERDCommenterSexy
nmap ,cs <Plug>NERDCommenterSexy
vmap ,cm <Plug>NERDCommenterMinimal
nmap ,cm <Plug>NERDCommenterMinimal
vmap ,c  <Plug>NERDCommenterToggle
nmap ,c  <Plug>NERDCommenterToggle
vmap ,cc <Plug>NERDCommenterComment
nmap ,cc <Plug>NERDCommenterComment
map O i
nmap Q :tabmove 0
xmap S <Plug>VSurround
nmap X :call TabJump('right')
nmap Z :call TabJump('left')
nmap <silent> \cv <Plug>VCSVimDiff
nmap <silent> \cu <Plug>VCSUpdate
nmap <silent> \cU <Plug>VCSUnlock
nmap <silent> \cs <Plug>VCSStatus
nmap <silent> \cr <Plug>VCSReview
nmap <silent> \cq <Plug>VCSRevert
nmap <silent> \cn <Plug>VCSAnnotate
nmap <silent> \cN <Plug>VCSSplitAnnotate
nmap <silent> \cl <Plug>VCSLog
nmap <silent> \cL <Plug>VCSLock
nmap <silent> \ci <Plug>VCSInfo
nmap <silent> \cg <Plug>VCSGotoOriginal
nmap <silent> \cG <Plug>VCSClearAndGotoOriginal
nmap <silent> \cd <Plug>VCSDiff
nmap <silent> \cD <Plug>VCSDelete
nmap <silent> \cc <Plug>VCSCommit
nmap <silent> \ca <Plug>VCSAdd
map \rwp <Plug>RestoreWinPosn
map \swp <Plug>SaveWinPosn
nmap \a <Plug>ToggleAutoCloseMappings
map \f :vimgrep /.*\<=expand("<cword>")\> ../**/*
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
xmap s <Plug>Vsurround
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <Plug>CVSWatchRemove :CVSWatch remove
nnoremap <silent> <Plug>CVSWatchOn :CVSWatch on
nnoremap <silent> <Plug>CVSWatchOff :CVSWatch off
nnoremap <silent> <Plug>CVSWatchAdd :CVSWatch add
nnoremap <silent> <Plug>CVSWatchers :CVSWatchers
nnoremap <silent> <Plug>CVSUnedit :CVSUnedit
nnoremap <silent> <Plug>CVSEditors :CVSEditors
nnoremap <silent> <Plug>CVSEdit :CVSEdit
nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff
nnoremap <silent> <Plug>VCSUpdate :VCSUpdate
nnoremap <silent> <Plug>VCSUnlock :VCSUnlock
nnoremap <silent> <Plug>VCSStatus :VCSStatus
nnoremap <silent> <Plug>VCSSplitAnnotate :VCSAnnotate!
nnoremap <silent> <Plug>VCSReview :VCSReview
nnoremap <silent> <Plug>VCSRevert :VCSRevert
nnoremap <silent> <Plug>VCSLog :VCSLog
nnoremap <silent> <Plug>VCSLock :VCSLock
nnoremap <silent> <Plug>VCSInfo :VCSInfo
nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!
nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal
nnoremap <silent> <Plug>VCSDiff :VCSDiff
nnoremap <silent> <Plug>VCSDelete :VCSDelete
nnoremap <silent> <Plug>VCSCommit :VCSCommit
nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate
nnoremap <silent> <Plug>VCSAdd :VCSAdd
nmap <silent> <Plug>RestoreWinPosn :call RestoreWinPosn()
nmap <silent> <Plug>SaveWinPosn :call SaveWinPosn()
nmap <silent> <Plug>NERDCommenterAppend :call NERDComment(0, "append")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")
vnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")
vnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(1, "nested")
nnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(0, "nested")
vnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(1, "alignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")
vnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(1, "alignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")
vmap <silent> <Plug>NERDCommenterYank :call NERDComment(1, "yank")
nmap <silent> <Plug>NERDCommenterYank :call NERDComment(0, "yank")
vnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(1, "invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(0, "invert")
vnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(1, "sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(0, "sexy")
vnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(1, "minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(0, "minimal")
vnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(1, "toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(0, "toggle")
vnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(1, "norm")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(0, "norm")
snoremap <Plug>selectToInsert d<BS>
vnoremap <silent> <Plug>(fakeclip-screen-[P) :call fakeclip#put('pastebuffer', visualmode(), '[P')
vnoremap <silent> <Plug>(fakeclip-screen-[p) :call fakeclip#put('pastebuffer', visualmode(), '[p')
vnoremap <silent> <Plug>(fakeclip-screen-]P) :call fakeclip#put('pastebuffer', visualmode(), ']P')
vnoremap <silent> <Plug>(fakeclip-screen-]p) :call fakeclip#put('pastebuffer', visualmode(), ']p')
vnoremap <silent> <Plug>(fakeclip-screen-gP) :call fakeclip#put('pastebuffer', visualmode(), 'gP')
vnoremap <silent> <Plug>(fakeclip-screen-gp) :call fakeclip#put('pastebuffer', visualmode(), 'gp')
vnoremap <silent> <Plug>(fakeclip-screen-P) :call fakeclip#put('pastebuffer', visualmode(), 'P')
vnoremap <silent> <Plug>(fakeclip-screen-p) :call fakeclip#put('pastebuffer', visualmode(), 'p')
nnoremap <silent> <Plug>(fakeclip-screen-[P) :call fakeclip#put('pastebuffer', '', '[P')
nnoremap <silent> <Plug>(fakeclip-screen-[p) :call fakeclip#put('pastebuffer', '', '[p')
nnoremap <silent> <Plug>(fakeclip-screen-]P) :call fakeclip#put('pastebuffer', '', ']P')
nnoremap <silent> <Plug>(fakeclip-screen-]p) :call fakeclip#put('pastebuffer', '', ']p')
nnoremap <silent> <Plug>(fakeclip-screen-gP) :call fakeclip#put('pastebuffer', '', 'gP')
nnoremap <silent> <Plug>(fakeclip-screen-gp) :call fakeclip#put('pastebuffer', '', 'gp')
nnoremap <silent> <Plug>(fakeclip-screen-P) :call fakeclip#put('pastebuffer', '', 'P')
nnoremap <silent> <Plug>(fakeclip-screen-p) :call fakeclip#put('pastebuffer', '', 'p')
vnoremap <silent> <Plug>(fakeclip-screen-Y) :call fakeclip#yank('pastebuffer', 'V')
nnoremap <silent> <Plug>(fakeclip-screen-Y) :call fakeclip#yank_Y('pastebuffer')
vnoremap <silent> <Plug>(fakeclip-screen-y) :call fakeclip#yank('pastebuffer', visualmode())
nnoremap <silent> <Plug>(fakeclip-screen-y) :set operatorfunc=fakeclip#pastebuffer_yankg@
vnoremap <silent> <Plug>(fakeclip-[P) :call fakeclip#put('clipboard', visualmode(), '[P')
vnoremap <silent> <Plug>(fakeclip-[p) :call fakeclip#put('clipboard', visualmode(), '[p')
vnoremap <silent> <Plug>(fakeclip-]P) :call fakeclip#put('clipboard', visualmode(), ']P')
vnoremap <silent> <Plug>(fakeclip-]p) :call fakeclip#put('clipboard', visualmode(), ']p')
vnoremap <silent> <Plug>(fakeclip-gP) :call fakeclip#put('clipboard', visualmode(), 'gP')
vnoremap <silent> <Plug>(fakeclip-gp) :call fakeclip#put('clipboard', visualmode(), 'gp')
vnoremap <silent> <Plug>(fakeclip-P) :call fakeclip#put('clipboard', visualmode(), 'P')
vnoremap <silent> <Plug>(fakeclip-p) :call fakeclip#put('clipboard', visualmode(), 'p')
nnoremap <silent> <Plug>(fakeclip-[P) :call fakeclip#put('clipboard', '', '[P')
nnoremap <silent> <Plug>(fakeclip-[p) :call fakeclip#put('clipboard', '', '[p')
nnoremap <silent> <Plug>(fakeclip-]P) :call fakeclip#put('clipboard', '', ']P')
nnoremap <silent> <Plug>(fakeclip-]p) :call fakeclip#put('clipboard', '', ']p')
nnoremap <silent> <Plug>(fakeclip-gP) :call fakeclip#put('clipboard', '', 'gP')
nnoremap <silent> <Plug>(fakeclip-gp) :call fakeclip#put('clipboard', '', 'gp')
nnoremap <silent> <Plug>(fakeclip-P) :call fakeclip#put('clipboard', '', 'P')
nnoremap <silent> <Plug>(fakeclip-p) :call fakeclip#put('clipboard', '', 'p')
vnoremap <silent> <Plug>(fakeclip-Y) :call fakeclip#yank('clipboard', 'V')
nnoremap <silent> <Plug>(fakeclip-Y) :call fakeclip#yank_Y('clipboard')
vnoremap <silent> <Plug>(fakeclip-y) :call fakeclip#yank('clipboard', visualmode())
nnoremap <silent> <Plug>(fakeclip-y) :set operatorfunc=fakeclip#clipboard_yankg@
vmap <F12> :marksgv
nmap <F12> :marks
vmap <F11> :reggv
nmap <F11> :reg
vmap <S-F10> :qall!gv
nmap <S-F10> :qall!
vmap <F10> :qallgv
nmap <F10> :qall
map <F9> :emenu VCS.	
vmap <F7> :set wrap! wrap?gv
nmap <F7> :set wrap! wrap?
vmap <F6> :set list! list?gv
nmap <F6> :set list! list?
vmap <F5> :nohlsgv
nmap <F5> :nohls
vmap <silent> <F4> :NERDTreeTogglegv
nmap <silent> <F4> :NERDTreeToggle
vmap <F3> :Rgrepgv
nmap <F3> :Rgrep
vmap <F2> :writegv
nmap <F2> :write
vmap <silent> <F1> :TlistTogglegv
nmap <silent> <F1> :TlistToggle
vmap <C-Down> ::tabmovegv
nmap <C-Down> ::tabmove
vmap <M-Down> ::tablastgv
nmap <M-Down> ::tablast
vmap <M-Up> ::tabfirstgv
nmap <M-Up> ::tabfirst
imap <silent>  X:call MyKeyMapHighlight()a
cmap <silent>  
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <silent>  =XPTemplateStart(0,{'popupOnly':1})
imap & <Plug>(fakeclip-screen-insert-p)
map! & <Plug>(fakeclip-screen-insert-o)
map! & <Plug>(fakeclip-screen-insert-r)
map! & <Plug>(fakeclip-screen-insert)
imap * <Plug>(fakeclip-insert-p)
map! * <Plug>(fakeclip-insert-o)
map! * <Plug>(fakeclip-insert-r)
map! * <Plug>(fakeclip-insert)
imap + <Plug>(fakeclip-insert-p)
map! + <Plug>(fakeclip-insert-o)
map! + <Plug>(fakeclip-insert-r)
map! + <Plug>(fakeclip-insert)
imap  <Plug>Isurround
imap t ::tabnew
cmap t ::tabnew
inoremap <silent> OC <Right>
inoremap <silent>  =XPTemplateStart(0)
imap jj 
let &cpo=s:cpo_save
unlet s:cpo_save
set keymap=russian-jcukenwin
set autoindent
set autoread
set backspace=indent,eol,start
set backup
set backupdir=~/.data/backup
set backupskip=/tmp/*,/cygdrive/c/Users/klen/AppData/Local/Temp/*,/cygdrive/c/Users/klen/AppData/Local/Temp/*,svn-commit.tmp,svn-commit.[0-9]*.tmp
set completeopt=menu
set confirm
set directory=~/.data/swap
set expandtab
set fileencodings=utf-8,cp1251,koi8-r,cp866
set foldclose=all
set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo
set helplang=ru
set hidden
set history=400
set hlsearch
set ignorecase
set incsearch
set infercase
set langmenu=none
set laststatus=2
set lazyredraw
set listchars=eol:$,tab:>-,trail:-,extends:>,precedes:<,nbsp:~
set mouse=a
set mousemodel=popup
set ruler
set rulerformat=%{XPMautoUpdate(\"ruler\")}
set runtimepath=~/.vim,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim72,/usr/local/share/vim/vimfiles/after,~/.vim/after,~/repo/dot.home/.vim/personal
set scrolloff=8
set secure
set shiftround
set shiftwidth=4
set shortmess=fimnrxoOtTI
set showcmd
set showmatch
set showtabline=2
set sidescroll=8
set sidescrolloff=10
set smartcase
set smartindent
set smarttab
set softtabstop=4
set spelllang=en,ru
set statusline=%<%f%h%m%#Error#%r%*%=%#warningmsg#%{SyntasticStatuslineFlag()}%*\ type=%Y\ format=%{&fileformat}\ file=%{&fileencoding}\ enc=%{&encoding}\ %b\ 0x%B\ %l,%c%V\ %P
set tags=tags
set termencoding=utf-8
set title
set virtualedit=block
set visualbell
set whichwrap=b,s,<,>,[,],l,h
set wildcharm=<Tab>
set wildignore=*.pyc
set wildmenu
set winminheight=0
set winminwidth=0
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/repo/dot.home/.vim
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 rc.vim
badd +0 .vim/.vimrc
silent! argdel *
edit rc.vim
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
vnoremap <buffer> <silent> [" :exe "normal! gv"|call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
nnoremap <buffer> <silent> [" :call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
vnoremap <buffer> <silent> [] m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "bW")
nnoremap <buffer> <silent> [] m':call search('^\s*endf*\%[unction]\>', "bW")
vnoremap <buffer> <silent> [[ m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "bW")
nnoremap <buffer> <silent> [[ m':call search('^\s*fu\%[nction]\>', "bW")
vnoremap <buffer> <silent> ]" :exe "normal! gv"|call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
nnoremap <buffer> <silent> ]" :call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
vnoremap <buffer> <silent> ][ m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "W")
nnoremap <buffer> <silent> ][ m':call search('^\s*endf*\%[unction]\>', "W")
vnoremap <buffer> <silent> ]] m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "W")
nnoremap <buffer> <silent> ]] m':call search('^\s*fu\%[nction]\>', "W")
lnoremap <buffer> " Э
lnoremap <buffer> # №
lnoremap <buffer> $ ;
lnoremap <buffer> & ?
lnoremap <buffer> ' э
lnoremap <buffer> , б
lnoremap <buffer> . ю
lnoremap <buffer> / .
lnoremap <buffer> : Ж
lnoremap <buffer> ; ж
lnoremap <buffer> < Б
lnoremap <buffer> > Ю
lnoremap <buffer> ? ,
lnoremap <buffer> @ "
lnoremap <buffer> A Ф
lnoremap <buffer> B И
lnoremap <buffer> C С
lnoremap <buffer> D В
lnoremap <buffer> E У
lnoremap <buffer> F А
lnoremap <buffer> G П
lnoremap <buffer> H Р
lnoremap <buffer> I Ш
lnoremap <buffer> J О
lnoremap <buffer> K Л
lnoremap <buffer> L Д
lnoremap <buffer> M Ь
lnoremap <buffer> N Т
lnoremap <buffer> O Щ
lnoremap <buffer> P З
lnoremap <buffer> Q Й
lnoremap <buffer> R К
lnoremap <buffer> S Ы
lnoremap <buffer> T Е
lnoremap <buffer> U Г
lnoremap <buffer> V М
lnoremap <buffer> W Ц
lnoremap <buffer> X Ч
lnoremap <buffer> Y Н
lnoremap <buffer> Z Я
lnoremap <buffer> [ х
lnoremap <buffer> ] ъ
lnoremap <buffer> ^ :
lnoremap <buffer> ` ё
lnoremap <buffer> a ф
lnoremap <buffer> b и
lnoremap <buffer> c с
lnoremap <buffer> d в
lnoremap <buffer> e у
lnoremap <buffer> f а
lnoremap <buffer> g п
let s:cpo_save=&cpo
set cpo&vim
lnoremap <buffer> h р
lnoremap <buffer> i ш
lnoremap <buffer> j о
lnoremap <buffer> k л
lnoremap <buffer> l д
lnoremap <buffer> m ь
lnoremap <buffer> n т
lnoremap <buffer> o щ
lnoremap <buffer> p з
lnoremap <buffer> q й
lnoremap <buffer> r к
lnoremap <buffer> s ы
lnoremap <buffer> t е
lnoremap <buffer> u г
lnoremap <buffer> v м
lnoremap <buffer> w ц
lnoremap <buffer> x ч
lnoremap <buffer> y н
lnoremap <buffer> z я
lnoremap <buffer> { Х
lnoremap <buffer> } Ъ
lnoremap <buffer> ~ Ё
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=russian-jcukenwin
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=sO:\"\ -,mO:\"\ \ ,eO:\"\",:\"
setlocal commentstring=\"%s
setlocal complete=.,w,b,u,t,i
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'vim'
setlocal filetype=vim
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
set foldmethod=syntax
setlocal foldmethod=syntax
setlocal foldminlines=1
set foldnestmax=3
setlocal foldnestmax=3
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetVimIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,=end,=else,=cat,=fina,=END,0\\
setlocal infercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en,ru
setlocal statusline=%<%f%h%m%#Error#%r%*%=%#warningmsg#%{SyntasticStatuslineFlag()}%*\ type=%Y\ format=%{&fileformat}\ file=%{&fileencoding}\ enc=%{&encoding}\ %b\ 0x%B\ %l,%c%V\ %P%{XPMautoUpdate(\"statusline\")}
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'vim'
setlocal syntax=vim
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=78
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 330 - ((19 * winheight(0) + 20) / 40)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
330
normal! 08l
tabedit .vim/.vimrc
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
vnoremap <buffer> <silent> [" :exe "normal! gv"|call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
nnoremap <buffer> <silent> [" :call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")
vnoremap <buffer> <silent> [] m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "bW")
nnoremap <buffer> <silent> [] m':call search('^\s*endf*\%[unction]\>', "bW")
vnoremap <buffer> <silent> [[ m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "bW")
nnoremap <buffer> <silent> [[ m':call search('^\s*fu\%[nction]\>', "bW")
vnoremap <buffer> <silent> ]" :exe "normal! gv"|call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
nnoremap <buffer> <silent> ]" :call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")
vnoremap <buffer> <silent> ][ m':exe "normal! gv"|call search('^\s*endf*\%[unction]\>', "W")
nnoremap <buffer> <silent> ][ m':call search('^\s*endf*\%[unction]\>', "W")
vnoremap <buffer> <silent> ]] m':exe "normal! gv"|call search('^\s*fu\%[nction]\>', "W")
nnoremap <buffer> <silent> ]] m':call search('^\s*fu\%[nction]\>', "W")
lnoremap <buffer> " Э
lnoremap <buffer> # №
lnoremap <buffer> $ ;
lnoremap <buffer> & ?
lnoremap <buffer> ' э
lnoremap <buffer> , б
lnoremap <buffer> . ю
lnoremap <buffer> / .
lnoremap <buffer> : Ж
lnoremap <buffer> ; ж
lnoremap <buffer> < Б
lnoremap <buffer> > Ю
lnoremap <buffer> ? ,
lnoremap <buffer> @ "
lnoremap <buffer> A Ф
lnoremap <buffer> B И
lnoremap <buffer> C С
lnoremap <buffer> D В
lnoremap <buffer> E У
lnoremap <buffer> F А
lnoremap <buffer> G П
lnoremap <buffer> H Р
lnoremap <buffer> I Ш
lnoremap <buffer> J О
lnoremap <buffer> K Л
lnoremap <buffer> L Д
lnoremap <buffer> M Ь
lnoremap <buffer> N Т
lnoremap <buffer> O Щ
lnoremap <buffer> P З
lnoremap <buffer> Q Й
lnoremap <buffer> R К
lnoremap <buffer> S Ы
lnoremap <buffer> T Е
lnoremap <buffer> U Г
lnoremap <buffer> V М
lnoremap <buffer> W Ц
lnoremap <buffer> X Ч
lnoremap <buffer> Y Н
lnoremap <buffer> Z Я
lnoremap <buffer> [ х
lnoremap <buffer> ] ъ
lnoremap <buffer> ^ :
lnoremap <buffer> ` ё
lnoremap <buffer> a ф
lnoremap <buffer> b и
lnoremap <buffer> c с
lnoremap <buffer> d в
lnoremap <buffer> e у
lnoremap <buffer> f а
lnoremap <buffer> g п
let s:cpo_save=&cpo
set cpo&vim
lnoremap <buffer> h р
lnoremap <buffer> i ш
lnoremap <buffer> j о
lnoremap <buffer> k л
lnoremap <buffer> l д
lnoremap <buffer> m ь
lnoremap <buffer> n т
lnoremap <buffer> o щ
lnoremap <buffer> p з
lnoremap <buffer> q й
lnoremap <buffer> r к
lnoremap <buffer> s ы
lnoremap <buffer> t е
lnoremap <buffer> u г
lnoremap <buffer> v м
lnoremap <buffer> w ц
lnoremap <buffer> x ч
lnoremap <buffer> y н
lnoremap <buffer> z я
lnoremap <buffer> { Х
lnoremap <buffer> } Ъ
lnoremap <buffer> ~ Ё
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=russian-jcukenwin
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=sO:\"\ -,mO:\"\ \ ,eO:\"\",:\"
setlocal commentstring=\"%s
setlocal complete=.,w,b,u,t,i
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'vim'
setlocal filetype=vim
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
set foldmethod=syntax
setlocal foldmethod=syntax
setlocal foldminlines=1
set foldnestmax=3
setlocal foldnestmax=3
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetVimIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,=end,=else,=cat,=fina,=END,0\\
setlocal infercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en,ru
setlocal statusline=%<%f%h%m%#Error#%r%*%=%#warningmsg#%{SyntasticStatuslineFlag()}%*\ type=%Y\ format=%{&fileformat}\ file=%{&fileencoding}\ enc=%{&encoding}\ %b\ 0x%B\ %l,%c%V\ %P%{XPMautoUpdate(\"statusline\")}
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'vim'
setlocal syntax=vim
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=78
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 7 - ((6 * winheight(0) + 20) / 40)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
7
normal! 036l
tabnext 2
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=fimnrxoOtTI
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
